###############################################################################
#
# IAR ANSI C/C++ Compiler V9.60.2.399/W64 for ARM         01/Feb/2025  19:56:45
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\proj\velograph\roland\cpu\roland_axis\src\board\mstep_board.c
#    Command line      =
#        -f
#        D:\proj\velograph\roland\cpu\roland_axis\roland_x_dbg\Obj\Board_7221520210927654578.dir\mstep_board.o.rsp
#        (D:\proj\velograph\roland\cpu\roland_axis\src\board\mstep_board.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D MSTEP_BRD -D STEP_X -lcN
#        D:\proj\velograph\roland\cpu\roland_axis\roland_x_dbg\List\Board_7221520210927654578.dir
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\roland\cpu\roland_axis\roland_x_dbg\Obj\Board_7221520210927654578.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        C:\iar\ewarm-9.60.2\arm\inc\c\DLib_Config_Full.h -I
#        D:\proj\velograph\roland\cpu\roland_axis\.\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\src\board\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\src\inc\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\common\libraries\inc\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\common\libraries\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\..\common\freertos\source\inc\
#        -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\common_stm32\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\common_stm32\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I D:\proj\velograph\roland\cpu\roland_axis\..\..\common\dbg\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\..\common\can\ -On
#        --use_c++_inline -I C:\iar\ewarm-9.60.2\arm\CMSIS\Core\Include\)
#        --dependencies=n
#        D:\proj\velograph\roland\cpu\roland_axis\roland_x_dbg\Obj\Board_7221520210927654578.dir\mstep_board.o.iar_deps
#    Locale            =  C
#    List file         =
#        D:\proj\velograph\roland\cpu\roland_axis\roland_x_dbg\List\Board_7221520210927654578.dir\mstep_board.lst
#    Object file       =
#        D:\proj\velograph\roland\cpu\roland_axis\roland_x_dbg\Obj\Board_7221520210927654578.dir\mstep_board.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\proj\velograph\roland\cpu\roland_axis\src\board\mstep_board.c
      1          #include "FreeRTOS.h"
      2          #include "queue.h"
      3          #include "semphr.h"
      4          #include "can.h"
      5          #include "can_cmds.h"
      6          #include "board.h"
      7          #include "printk.h"
      8          ///=============================
      9          
     10          uint8_t cur_state=0;  /// .5-.4 conc, .3 - .0 status
     11          int32_t cur_coord=0;
     12          uint8_t ena_check_conc=0;
     13          
     14          int send_char_dbg (int c) 
     15          { 
     16          while (!(UART_DBG->SR & 0x0080));
     17          UART_DBG->DR = (c & 0x1FF);
     18          return (c);
     19          }
     20          
     21          int get_byte_dbg (void) 
     22          {
     23          while (!(UART_DBG->SR & 0x0020));
     24          return (UART_DBG->DR);
     25          }
     26          
     27          #if 1
     28          void _putk(char ch)
     29          {
     30          //sendchar_hdlc(ch);
     31          send_char_dbg(ch);
     32          }
     33          #endif
     34          int check_push_key_dbg(void)
     35          {
     36          return  (UART_DBG->SR & USART_SR_RXNE); 
     37          }
     38          
     39          void init_gpio(void)
     40          {
     41          ////RCC_AHBPeriphClockCmd(XEN_PIN_RCC_AHB,ENABLE);
     42          GPIO_InitTypeDef GPIO_InitStructure;
     43          ////=============== TST1 ============================
     44          RCC_AHB1PeriphClockCmd(TST1_PIN_RCC, ENABLE);
     45          GPIO_InitStructure.GPIO_Pin = TST1_PIN;
     46          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     47          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     48          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     49          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     50          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     51          GPIO_Init( TST1_PIN_GPIO, &GPIO_InitStructure );
     52          GPIO_SetBits(TST1_PIN_GPIO, TST1_PIN);
     53          ////=============== TST2 ============================
     54          RCC_AHB1PeriphClockCmd(TST2_PIN_RCC, ENABLE);
     55          GPIO_InitStructure.GPIO_Pin = TST2_PIN;
     56          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     57          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     58          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     59          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     60          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     61          GPIO_Init( TST2_PIN_GPIO, &GPIO_InitStructure );
     62          ////=============== TST3 ============================
     63          RCC_AHB1PeriphClockCmd(TST3_PIN_RCC, ENABLE);
     64          GPIO_InitStructure.GPIO_Pin = TST3_PIN;
     65          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     66          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     67          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     68          
     69          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     70          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     71          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     72          GPIO_Init( TST3_PIN_GPIO, &GPIO_InitStructure );
     73          GPIO_PinAFConfig(TST3_PIN_GPIO, TST3_PIN_NPIN, GPIO_AF_TIM1);
     74          
     75          ////=============== TST7 ============================
     76          RCC_AHB1PeriphClockCmd(TST7_PIN_RCC, ENABLE);
     77          GPIO_InitStructure.GPIO_Pin = TST7_PIN;
     78          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     79          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     80          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     81          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     82          GPIO_Init( TST7_PIN_GPIO, &GPIO_InitStructure );
     83          GPIO_PinAFConfig(TST7_PIN_GPIO, TST7_PIN_NPIN, GPIO_AF_TIM8);
     84            
     85          ////=========== DBG_UART =================================================== 
     86          RCC_AHB1PeriphClockCmd(UART_DBG_TX_RCC, ENABLE);
     87          GPIO_InitStructure.GPIO_Pin = UART_DBG_TX_PIN;
     88          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     89          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     90          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     91          GPIO_Init( UART_DBG_TX_GPIO, &GPIO_InitStructure );
     92          
     93          RCC_AHB1PeriphClockCmd(UART_DBG_RX_RCC, ENABLE);
     94          GPIO_InitStructure.GPIO_Pin = UART_DBG_RX_PIN;
     95          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     96          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     97          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     98          GPIO_Init( UART_DBG_RX_GPIO, &GPIO_InitStructure );
     99            
    100          GPIO_PinAFConfig(UART_DBG_TX_GPIO_PORT, UART_DBG_TX_PIN_NPIN, UART_DBG_TX_AF);
    101          GPIO_PinAFConfig(UART_DBG_RX_GPIO_PORT, UART_DBG_RX_PIN_NPIN, UART_DBG_RX_AF);
    102          ////===================================================================
    103          ////=============== MOT_FAULT ============================
    104          RCC_AHB1PeriphClockCmd(MOT_FAULT_PIN_RCC, ENABLE);
    105          GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
    106          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    107          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    108          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    109          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    110          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    111          GPIO_Init( MOT_FAULT_PIN_GPIO, &GPIO_InitStructure );
    112          ////=============== MOT_CONC ============================
    113          RCC_AHB1PeriphClockCmd(CONC_PIN_RCC, ENABLE);
    114          GPIO_InitStructure.GPIO_Pin = CONC_PIN;
    115          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    116          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    117          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    118          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    119          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    120          GPIO_Init( CONC_PIN_GPIO, &GPIO_InitStructure );
    121          
    122          ////=============== MOT_M2 ============================
    123          RCC_AHB1PeriphClockCmd(MOT_M2_PIN_RCC, ENABLE);
    124          GPIO_InitStructure.GPIO_Pin = MOT_M2_PIN;
    125          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    126          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    127          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    128          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    129          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    130          GPIO_Init( MOT_M2_PIN_GPIO, &GPIO_InitStructure );
    131          ////=============== MOT_M1 ============================
    132          RCC_AHB1PeriphClockCmd(MOT_M1_PIN_RCC, ENABLE);
    133          GPIO_InitStructure.GPIO_Pin = MOT_M1_PIN;
    134          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    135          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    136          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    137          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    138          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    139          GPIO_Init( MOT_M1_PIN_GPIO, &GPIO_InitStructure );
    140          ////=============== MOT_M0 ============================
    141          RCC_AHB1PeriphClockCmd(MOT_M0_PIN_RCC, ENABLE);
    142          GPIO_InitStructure.GPIO_Pin = MOT_M0_PIN;
    143          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    144          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    145          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    146          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    147          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    148          GPIO_Init( MOT_M0_PIN_GPIO, &GPIO_InitStructure );
    149          ////=============== MOT_ENA ============================
    150          RCC_AHB1PeriphClockCmd(MOT_ENA_PIN_RCC, ENABLE);
    151          GPIO_InitStructure.GPIO_Pin = MOT_ENA_PIN;
    152          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    153          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    154          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    155          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    156          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    157          GPIO_Init( MOT_ENA_PIN_GPIO, &GPIO_InitStructure );
    158          ////=============== MOT_RESET ============================
    159          RCC_AHB1PeriphClockCmd(MOT_RESET_PIN_RCC, ENABLE);
    160          GPIO_InitStructure.GPIO_Pin = MOT_RESET_PIN;
    161          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    162          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    163          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    164          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    165          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    166          GPIO_Init( MOT_RESET_PIN_GPIO, &GPIO_InitStructure );
    167          ////=============== MOT_SLEEP ============================
    168          RCC_AHB1PeriphClockCmd(MOT_SLEEP_PIN_RCC, ENABLE);
    169          GPIO_InitStructure.GPIO_Pin = MOT_SLEEP_PIN;
    170          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    171          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    172          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    173          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    174          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    175          GPIO_Init( MOT_SLEEP_PIN_GPIO, &GPIO_InitStructure );
    176          ////#define MOT_STEP_TIM  	        TIM12
    177          ////=============== MOT_STEP ============================
    178          RCC_AHB1PeriphClockCmd(MOT_STEP_PIN_RCC, ENABLE);
    179          GPIO_InitStructure.GPIO_Pin = MOT_STEP_PIN;
    180          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    181          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    182          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    183          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    184          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    185          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    186          GPIO_Init( MOT_STEP_PIN_GPIO, &GPIO_InitStructure );
    187          GPIO_PinAFConfig(MOT_STEP_PIN_GPIO, MOT_STEP_PIN_NPIN, GPIO_AF_TIM1);
    188          ////===================================================================
    189          
    190          ////=============== MOT_DIR ============================
    191          RCC_AHB1PeriphClockCmd(MOT_DIR_PIN_RCC, ENABLE);
    192          GPIO_InitStructure.GPIO_Pin = MOT_DIR_PIN;
    193          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    194          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    195          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    196          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    197          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    198          GPIO_Init( MOT_DIR_PIN_GPIO, &GPIO_InitStructure );
    199          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    200          
    201          ////============== LED_PWM ============================
    202          RCC_AHB1PeriphClockCmd(LED_PWM_PIN_RCC, ENABLE);
    203          GPIO_InitStructure.GPIO_Pin = LED_PWM_PIN;
    204          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    205          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    206          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    207          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    208          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    209          GPIO_Init( LED_PWM_PIN_GPIO, &GPIO_InitStructure );
    210          GPIO_PinAFConfig(LED_PWM_PIN_GPIO, LED_PWM_PIN_NPIN, GPIO_AF_TIM8);
    211          ////=============== ON_LED0 ============================
    212          RCC_AHB1PeriphClockCmd(ON_LED0_PIN_RCC, ENABLE);
    213          GPIO_InitStructure.GPIO_Pin = ON_LED0_PIN;
    214          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    215          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    216          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    217          GPIO_Init( ON_LED0_PIN_GPIO, &GPIO_InitStructure );
    218          ////=============== ON_LED1 ============================
    219          RCC_AHB1PeriphClockCmd(ON_LED1_PIN_RCC, ENABLE);
    220          GPIO_InitStructure.GPIO_Pin = ON_LED1_PIN;
    221          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    222          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    223          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    224          GPIO_Init( ON_LED1_PIN_GPIO, &GPIO_InitStructure );
    225          
    226           /* CAN GPIOs configuration **************************************************/
    227          ////=============== CAN1_INH ============================
    228          RCC_AHB1PeriphClockCmd(CAN1_INH_PIN_RCC, ENABLE);
    229          GPIO_InitStructure.GPIO_Pin = CAN1_INH_PIN;
    230          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    231          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    232          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    233          GPIO_Init( CAN1_INH_PIN_GPIO, &GPIO_InitStructure );
    234          GPIO_ResetBits(CAN1_INH_PIN_GPIO, CAN1_INH_PIN);
    235          
    236            /* Enable GPIO clock */
    237          RCC_AHB1PeriphClockCmd(CAN1_GPIO_CLK, ENABLE);
    238          
    239            /* Connect CAN pins to AF9 */
    240            GPIO_PinAFConfig(CAN1_GPIO_PORT, CAN1_RX_SOURCE, CAN1_AF_PORT);
    241            GPIO_PinAFConfig(CAN1_GPIO_PORT, CAN1_TX_SOURCE, CAN1_AF_PORT);
    242          
    243            /* Configure CAN RX and TX pins */
    244            GPIO_InitStructure.GPIO_Pin = CAN1_RX_PIN | CAN1_TX_PIN;
    245            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    246            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    247            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    248            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    249            GPIO_Init(CAN1_GPIO_PORT, &GPIO_InitStructure);
    250          
    251          }
    252          
    253          ////=============================================
    254          void UART_DBG_Init(void)
    255          {
    256          ////GPIO_InitTypeDef GPIO_InitStructure;
    257          USART_InitTypeDef USART_InitStructure;
    258          UART_DBG_CLK_INIT(UART_DBG_CLK, ENABLE);
    259          USART_DeInit(UART_DBG);
    260          USART_InitStructure.USART_BaudRate = 115200;
    261          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    262          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    263          USART_InitStructure.USART_Parity = USART_Parity_No;
    264          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    265          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    266          USART_Init(UART_DBG, &USART_InitStructure);
    267          UART_DBG->CR1 |= USART_CR1_RXNEIE;
    268          USART_Cmd(UART_DBG, ENABLE);
    269          }
    270          
    271          ////==================================================
    272          ////==================================================
    273          void  set_m0(uint8_t idat)
    274          {
    275          if(idat&0x1)
    276            {
    277            GPIO_SetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    278            }
    279          else
    280            {
    281             GPIO_ResetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    282            }
    283          }
    284          
    285          void  set_sleep_mot(uint8_t idat)
    286          {
    287          if(idat&0x1)
    288            {
    289            GPIO_SetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    290            }
    291          else
    292            {
    293             GPIO_ResetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    294            }
    295          }
    296          void  set_ena_mot(uint8_t idat)
    297          {
    298          if(idat&0x1)
    299            {
    300            GPIO_SetBits(MOT_ENA_PIN_GPIO, MOT_ENA_PIN);
    301            }
    302          else
    303            {
    304             GPIO_ResetBits(MOT_ENA_PIN_GPIO, MOT_ENA_PIN);
    305            }
    306          }
    307          void  set_dir_mot(uint8_t idat)
    308          {
    309          if(idat&0x1)
    310            {
    311            GPIO_SetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    312            }
    313          else
    314            {
    315             GPIO_ResetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    316            }
    317          }
    318          void  set_reset_mot(uint8_t idat)
    319          {
    320          if(idat&0x1)
    321            {
    322            GPIO_SetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    323            }
    324          else
    325            {
    326             GPIO_ResetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    327            }
    328          }
    329          
    330          void  on_led0(uint8_t idat)
    331          {
    332          if(idat&0x1)
    333            {
    334            GPIO_SetBits(ON_LED0_PIN_GPIO, ON_LED0_PIN);
    335            }
    336          else
    337            {
    338             GPIO_ResetBits(ON_LED0_PIN_GPIO, ON_LED0_PIN);
    339            }
    340          }
    341          ////==================================================
    342          void  on_led1(uint8_t idat)
    343          {
    344          if(idat&0x1)
    345            {
    346            GPIO_SetBits(ON_LED1_PIN_GPIO, ON_LED1_PIN);
    347            }
    348          else
    349            {
    350             GPIO_ResetBits(ON_LED1_PIN_GPIO, ON_LED1_PIN);
    351            }
    352          }
    353          
    354          ////==================================================
    355          
    356          void set_led_dutycycle (uint32_t val)
    357          {
    358          if (val > LED_PWM_TIM_PERIOD)
    359            {
    360            val = LED_PWM_TIM_PERIOD;
    361            }
    362          LED_PWM_TIM->CCR3 = val;
    363          }
    364          
    365          void led_tim_en (u32 on_off)
    366          {
    367          if (on_off & 0x01)
    368            {
    369            TIM_Cmd(LED_PWM_TIM, ENABLE);
    370            }
    371          else
    372            {
    373            TIM_Cmd(LED_PWM_TIM, DISABLE);
    374            TIM_SetCounter(LED_PWM_TIM, 0);
    375            }
    376          }
    377          
    378          ////=======================================================
    379          void led_tim_init(void)
    380          {
    381          RCC->APB2ENR |= LED_PWM_TIM_RCC;
    382          LED_PWM_TIM->PSC = LED_PWM_TIM_PRESC;
    383          ////LED_PWM_TIM->ARR = 1000;
    384          LED_PWM_TIM->ARR = LED_PWM_TIM_PERIOD;////(uint16_t) (((SystemCoreClock / APB2_pres) * 2) / TIM_LED_FREQ) - 1;
    385          LED_PWM_TIM->CCR3 = LED_PWM_TIM_PERIOD/2;////30;
    386          LED_PWM_TIM->CCER |= TIM_CCER_CC3NE;////| TIM_CCER_CC3NP;
    387          LED_PWM_TIM->BDTR |= TIM_BDTR_MOE;
    388          LED_PWM_TIM->CCMR2 = TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; 
    389          LED_PWM_TIM->CR1 &= ~TIM_CR1_DIR;
    390          LED_PWM_TIM->CR1 &= ~TIM_CR1_CMS;
    391          LED_PWM_TIM->CR1 |= TIM_CR1_CEN;
    392          }
    393          
    394          extern volatile uint32_t num_step;
    395          
    396          uint8_t get_conc(void)
    397          {
    398          return GPIO_ReadInputDataBit(CONC_PIN_GPIO, CONC_PIN);
    399          }
    400          extern void init_can(void);
    401          ////=============================================
    402          void hw_board_init(void)
    403          {
    404          init_gpio();
    405          UART_DBG_Init(); 
    406          init_can();
    407          
    408          ///led_tim_init();
    409          ///mot_tim_init();
    410          }
    411          ////============================================
    412          extern uint8_t can1_send(uint16_t id,uint8_t data_len,uint8_t *data);
    413          extern uint8_t  CAN_TxRdy;              /* CAN HW ready to transmit message */
    414          extern uint8_t  CAN_RxRdy;              /* CAN HW received a message        */
    415          extern CanRxMsg RxMessage;
    416          
    417          extern can_msg_t CAN_RxMsg;
    418          void state_task( void *pvParameters )
    419          {
    420            uint8_t tmp; 
    421          int32_t prev_coord=0xffffffff;  
    422          uint8_t prev_state=0xff; 
    423          printk("\n\r state_task"); 
    424          for(;;)
    425            {
    426            tmp=get_conc();  
    427            tmp<<=4;
    428            cur_state&= ~CONC_MASK;
    429            cur_state |= tmp;
    430              if((prev_state!=cur_state)||(prev_coord!=cur_coord))
    431              {
    432                prev_state=cur_state;
    433                prev_coord=cur_coord;
    434                put_can_cmd_stat(cur_state,cur_coord);
    435               }
    436             else
    437                msleep(50);
    438            }
    439          
    440          }
    441          
    442          void tst_task( void *pvParameters )
    443          {
    444          ///uint8_t psk=0; 
    445          char key=0;
    446          uint8_t can_send_data[8]; 
    447          
    448          printk("\n\r tst_task"); 
    449          for(;;)
    450            {
    451            key=dbg_get_byte() ;  
    452            switch(key)
    453              {
    454              case 'a':
    455                can_send_data[0] ++;
    456                break;
    457              case 'd':
    458                if(can_send_data[0])
    459                  can_send_data[0]--;
    460                  break;
    461              case 's':
    462                can1_send(0x13,8,can_send_data);
    463                 break;
    464             }
    465            printk("\n\r key[%c]",key); 
    466            } 
    467          
    468          }
    469          
    470          ////========================================================  
    471          void tst1_task( void *pvParameters )
    472          {
    473          ////uint8_t btst=0; 
    474          uint8_t ii=0; 
    475          printk("\n\r tst1_task"); 
    476          for(;;)
    477            {
    478            if( CAN_RxRdy)
    479            {
    480             CAN_RxRdy=0;
    481            printk("\n\r can_rx"); 
    482             printk("\n\r ExtId[%x]",RxMessage.ExtId);
    483             printk("\n\r DLC[%x]\n\r ",RxMessage.DLC);
    484             for(ii=0;ii<8;ii++)
    485              {
    486              printk("[%x] ",RxMessage.Data[ii]);
    487              }
    488            }
    489            else
    490            {
    491              msleep(10);
    492            }
    493            }
    494          }
    495          
    496          void __tst_task_( void *pvParameters )
    497          {
    498          ////uint8_t btst=0; 
    499          uint8_t psk=0; 
    500          char key=0;
    501          int nstep=300;
    502          uint8_t dir=0;
    503          uint8_t mot_rej=0;
    504          printk("\n\r tst_task"); 
    505          
    506          set_sleep_mot(1);
    507          set_ena_mot(1);
    508          ///set_reset_mot(0);
    509          uDelay(1000);
    510          set_reset_mot(1);
    511          ////set_ena_mot(0);
    512          
    513          #if 0       
    514          for(;;)
    515            {
    516          //// sendchar2 (0x33) ; 
    517            put_tst_pin(btst);
    518            btst++;  
    519            ////delay__ms(1);  
    520            uDelay(20000);
    521            }
    522          #endif        
    523           for(;;)
    524            {
    525            key=dbg_get_byte() ;  
    526            switch(key)
    527              {
    528              case 'a':
    529                nstep += 20;
    530                break;
    531              case 's':
    532                if(nstep)
    533                  nstep-= 20;
    534                  break;
    535              case 'd':
    536                dir ++;
    537                dir&=0x1;
    538                break;
    539              case 'm':
    540                mot_rej ++;
    541                mot_rej&=0x7;
    542                break;
    543              case 'p':
    544               psk=1;
    545                break;
    546               
    547             }
    548            printk("\n\r nstep[%d] dir[%x] Mot_rej[%x]",nstep,dir,mot_rej); 
    549            set_dir_mot(dir);
    550            set_mot_rej(mot_rej);
    551            if(psk)
    552              {
    553              put_mot_nstep(nstep);
    554              psk=0;
    555              }
    556          ////  set_led_dutycycle (duty);
    557          
    558            } 
    559          }
    560          ////============================================
    561          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   UART_DBG_Init
        24   -> RCC_APB1PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_Init
      32   __tst_task_
        32   -> _printk
        32   -> get_byte_dbg
        32   -> put_mot_nstep
        32   -> set_dir_mot
        32   -> set_ena_mot
        32   -> set_mot_rej
        32   -> set_reset_mot
        32   -> set_sleep_mot
        32   -> uDelay
       8   _putk
         8   -> send_char_dbg
       0   check_push_key_dbg
       0   get_byte_dbg
       8   get_conc
         8   -> GPIO_ReadInputDataBit
       8   hw_board_init
         8   -> UART_DBG_Init
         8   -> init_can
         8   -> init_gpio
      24   init_gpio
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> GPIO_ResetBits
        24   -> GPIO_SetBits
        24   -> RCC_AHB1PeriphClockCmd
      16   led_tim_en
        16   -> TIM_Cmd
        16   -> TIM_SetCounter
       0   led_tim_init
       8   on_led0
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   on_led1
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       0   send_char_dbg
       8   set_dir_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_ena_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       0   set_led_dutycycle
       8   set_m0
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_reset_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_sleep_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
      24   state_task
        24   -> _printk
        24   -> get_conc
        24   -> put_can_cmd_stat
        24   -> vTaskDelay
      16   tst1_task
        16   -> _printk
        16   -> vTaskDelay
      24   tst_task
        24   -> _printk
        24   -> can1_send
        24   -> get_byte_dbg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_23
       4  ??DataTable19_24
       4  ??DataTable19_25
       4  ??DataTable19_26
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
      16  ?_0
      12  ?_1
      12  ?_2
      16  ?_3
      12  ?_4
      16  ?_5
      16  ?_6
       8  ?_7
      36  ?_8
      88  UART_DBG_Init
     174  __tst_task_
      14  _putk
      14  check_push_key_dbg
       4  cur_coord
       1  cur_state
       1  ena_check_conc
      20  get_byte_dbg
      12  get_conc
      16  hw_board_init
     922  init_gpio
      38  led_tim_en
      90  led_tim_init
      28  on_led0
      28  on_led1
      24  send_char_dbg
      28  set_dir_mot
      32  set_ena_mot
      20  set_led_dutycycle
      36  set_m0
      32  set_reset_mot
      36  set_sleep_mot
      86  state_task
      86  tst1_task
      90  tst_task

 
     6 bytes in section .bss
   144 bytes in section .rodata
 2'022 bytes in section .text
 
 2'022 bytes of CODE  memory
   144 bytes of CONST memory
     6 bytes of DATA  memory

Errors: none
Warnings: none

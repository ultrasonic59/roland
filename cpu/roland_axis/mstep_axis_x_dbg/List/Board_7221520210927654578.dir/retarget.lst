###############################################################################
#
# IAR ANSI C/C++ Compiler V9.60.2.399/W64 for ARM         01/Feb/2025  18:17:04
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =
#        D:\proj\velograph\roland\cpu\roland_axis\src\retarget.c
#    Command line             =
#        -f
#        D:\proj\velograph\roland\cpu\roland_axis\mstep_axis_x_dbg\Obj\Board_7221520210927654578.dir\retarget.o.rsp
#        (D:\proj\velograph\roland\cpu\roland_axis\src\retarget.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D MSTEP_BRD -D STEP_X -lcN
#        D:\proj\velograph\roland\cpu\roland_axis\mstep_axis_x_dbg\List\Board_7221520210927654578.dir
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\roland\cpu\roland_axis\mstep_axis_x_dbg\Obj\Board_7221520210927654578.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        C:\iar\ewarm-9.60.2\arm\inc\c\DLib_Config_Full.h -I
#        D:\proj\velograph\roland\cpu\roland_axis\.\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\src\board\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\src\inc\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\common\libraries\inc\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\common\libraries\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\..\common\freertos\source\inc\
#        -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\common_stm32\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\common_stm32\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I D:\proj\velograph\roland\cpu\roland_axis\..\..\common\dbg\ -I
#        D:\proj\velograph\roland\cpu\roland_axis\..\..\common\can\ -On
#        --use_c++_inline -I C:\iar\ewarm-9.60.2\arm\CMSIS\Core\Include\)
#        --dependencies=n
#        D:\proj\velograph\roland\cpu\roland_axis\mstep_axis_x_dbg\Obj\Board_7221520210927654578.dir\retarget.o.iar_deps
#    Locale                   =  C
#    List file                =
#        D:\proj\velograph\roland\cpu\roland_axis\mstep_axis_x_dbg\List\Board_7221520210927654578.dir\retarget.lst
#    Object file              =
#        D:\proj\velograph\roland\cpu\roland_axis\mstep_axis_x_dbg\Obj\Board_7221520210927654578.dir\retarget.o
#    Runtime model:              
#      __CPP_Runtime          =  1
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  1
#      __dlib_version         =  6
#
###############################################################################

D:\proj\velograph\roland\cpu\roland_axis\src\retarget.c
      1          #include <stdio.h>
      2          #include <stdint.h>
      3          
      4          extern int send_char_dbg(int c) ;
      5          
      6          size_t __write(int handle, const unsigned char * buffer, size_t size)
      7          {
      8              int i;
      9          ////    UNUSED_PARAMETER(handle);
     10              for (i = 0; i < size; i++)
     11              {
     12          ////     UNUSED_VARIABLE(app_uart_put(*buffer++));
     13          ///     my_uart_tx(*buffer++);
     14               send_char_dbg(*buffer++);
     15               
     16              }
     17              return size;
     18          }
     19          extern int get_byte_dbg(void) ;
     20          
     21          size_t __read(int handle, unsigned char * buffer, size_t size)
     22          {
     23           ///   UNUSED_PARAMETER(handle);
     24           ////   UNUSED_PARAMETER(size);
     25            *buffer=get_byte_dbg();
     26          #if 0    
     27              while (app_uart_get((uint8_t *)buffer) == NRF_ERROR_NOT_FOUND)
     28              {
     29                  // No implementation needed.
     30              }
     31          #endif
     32              return 1;
     33          }
     34          extern int rdy_rx_dbg(void) ;
     35          
     36          int __data_rdy( int handle)
     37          {
     38          ////return platform_stdio_rdy();
     39          return rdy_rx_dbg() ;
     40          }
     41          
     42          long __lseek(int handle, long offset, int whence)
     43          {
     44              return -1;
     45          }
     46          int __close(int handle)
     47          {
     48              return 0;
     49          }
     50          int remove(const char *ch)
     51          {
     52              return 0;
     53          }
     54          
     55          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   __close
       8   __data_rdy
         8   -> rdy_rx_dbg
       0   __lseek
      16   __read
        16   -> get_byte_dbg
      24   __write
        24   -> send_char_dbg
       0   remove


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       6  __close
      10  __data_rdy
       8  __lseek
      18  __read
      30  __write
       6  remove

 
 78 bytes in section .text
 
 78 bytes of CODE memory

Errors: none
Warnings: none
